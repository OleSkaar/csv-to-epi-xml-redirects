{"version":3,"sources":["utils/arrayToXml.js","Parser.js","utils/stringToXMLFile.js","App.js","serviceWorker.js","index.js"],"names":["urlFormat","arrayToXml","array","oldUrl","newUrl","outputString","line","data","length","match","console","log","Parser","dropAreaStyle","dropArea","height","dropFile","fileSizeInfo","borderRadius","lineHeight","marginBottom","padding","overflowWrap","fileNameInfo","fontSize","highlight","borderColor","backgroundColor","handleOnDrop","dataString","props","createXML","handleOnError","err","file","inputElem","reason","alert","handleOnRemoveFile","className","configOptions","error","this","style","onDrop","onError","addRemoveButton","removeButtonColor","onRemoveFile","Component","stringToXMLFile","input","element","document","createElement","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iWAAMA,EAAY,QAaH,SAASC,EAAWC,GAC/B,IADsC,EATxBC,EAAQC,EAUlBC,EAbM,gEAY4B,cAEnBH,GAFmB,IAEtC,2BAA0B,CAAC,IAAhBI,EAAe,QAElBA,EAAKC,KAAKC,OAAS,GACnBF,EAAKC,KAAK,GAAGE,MAAMT,IACnBM,EAAKC,KAAK,GAAGE,MAAMT,GAEnBK,IAjBMF,EAiBmBG,EAAKC,KAAK,GAjBrBH,EAiByBE,EAAKC,KAAK,GAjB5C,kCAEJJ,EAFI,8BAGJC,EAHI,wBAmBPM,QAAQC,IAAI,2BACZD,QAAQC,IAAIL,KAXoB,8BAgBtC,OAFAD,GAlBQ,4B,ICJSO,E,4MACjBC,cAAgB,CACZC,SAAU,CACNC,OAAQ,OACRC,SAAU,CACNC,aAAc,CACVC,aAAc,EACdC,WAAY,QACZC,aAAc,QACdC,QAAS,QACTC,aAAc,YAElBC,aAAc,CACVL,aAAc,EACdM,SAAU,GACVL,WAAY,QACZE,QAAS,QACTC,aAAc,aAGtBG,UAAW,CACPC,YAAa,QAGrBD,UAAW,CACPC,YAAa,MACbC,gBAAiB,Q,EAGzBC,aAAe,SAACrB,GACZ,IAAMsB,EAAa5B,EAAWM,GAC9B,EAAKuB,MAAMC,UAAUF,I,EAGzBG,cAAgB,SAACC,EAAKC,EAAMC,EAAWC,GACnCC,MAAM,UAAD,OACSJ,EADT,mBACuBC,EADvB,qBACwCE,EADxC,4BACkED,K,EAI3EG,mBAAqB,SAAC/B,GAClB8B,MAAM,uC,uDAIN,OACI,yBAAKE,UAAU,aACX,kBAAC,IAAD,CACIC,cAAe,CAACC,MAAOC,KAAKV,eAC5BW,MAAOD,KAAK7B,cACZ+B,OAAQF,KAAKd,aACbiB,QAASH,KAAKV,cACdc,iBAAe,EACfC,kBAAkB,UAClBC,aAAcN,KAAKJ,oBAEnB,8E,GAxDgBW,aCMrBC,G,MAXS,SAACC,GACrB,IAAMC,EAAUC,SAASC,cAAc,KACjCpB,EAAO,IAAIqB,KAAK,CAACJ,GAAQ,CAC3BK,KAAM,aAEVJ,EAAQK,KAAOC,IAAIC,gBAAgBzB,GACnCkB,EAAQQ,SAAW,sBACnBP,SAASQ,KAAKC,YAAYV,GAC1BA,EAAQW,UC6BGC,MAhCf,WACI,OACI,yBAAKzB,UAAU,OACX,8DACA,+IAIA,oJAE8D,IAC1D,oCAHJ,wDAIe,kCAJf,KAMA,6JAIA,2BACI,uMAMJ,kBAAC,EAAD,CAAQR,UAAWmB,GACf,sFCnBIe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3D,MACvB,2DCZN4D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACL/B,QAAQ+B,MAAMA,EAAMuC,c","file":"static/js/main.f20a68c8.chunk.js","sourcesContent":["const urlFormat = /^\\/.+/;\r\nconst xmlStart = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<redirects>\r\n  <urls>`;\r\nconst redirect = (oldUrl, newUrl) => `\r\n    <url>\r\n      <old>${oldUrl}</old>\r\n      <new>${newUrl}</new>\r\n    </url>`;\r\nconst xmlEnd = `\r\n  </urls>\r\n</redirects>`;\r\n\r\nexport default function arrayToXml(array) {\r\n    let outputString = xmlStart;\r\n    for (const line of array) {\r\n        if (\r\n            line.data.length > 1 &&\r\n            line.data[0].match(urlFormat) &&\r\n            line.data[1].match(urlFormat)\r\n        ) {\r\n            outputString += redirect(line.data[0], line.data[1]);\r\n        } else {\r\n          console.log('Could not process line:')\r\n          console.log(line)\r\n        }\r\n    }\r\n    outputString += xmlEnd;\r\n\r\n    return outputString;\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { CSVReader } from 'react-papaparse';\r\nimport arrayToXml from './utils/arrayToXml';\r\n\r\nexport default class Parser extends Component {\r\n    dropAreaStyle = {\r\n        dropArea: {\r\n            height: '40vh',\r\n            dropFile: {\r\n                fileSizeInfo: {\r\n                    borderRadius: 3,\r\n                    lineHeight: '1.1em',\r\n                    marginBottom: '0.5em',\r\n                    padding: '0.5em',\r\n                    overflowWrap: 'anywhere',\r\n                },\r\n                fileNameInfo: {\r\n                    borderRadius: 3,\r\n                    fontSize: 14,\r\n                    lineHeight: '1.1em',\r\n                    padding: '0.5em',\r\n                    overflowWrap: 'anywhere',\r\n                },\r\n            },\r\n            highlight: {\r\n                borderColor: 'red'\r\n            }\r\n        },\r\n        highlight: {\r\n            borderColor: 'red',\r\n            backgroundColor: 'red'\r\n        }\r\n    };\r\n    handleOnDrop = (data) => {\r\n        const dataString = arrayToXml(data);\r\n        this.props.createXML(dataString);\r\n    };\r\n\r\n    handleOnError = (err, file, inputElem, reason) => {\r\n        alert(\r\n            `Error: ${err}, File: ${file}, Reason: ${reason}, Input element: ${inputElem}`\r\n        );\r\n    };\r\n\r\n    handleOnRemoveFile = (data) => {\r\n        alert('File removed. Please upload again.');\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropField\">\r\n                <CSVReader\r\n                    configOptions={{error: this.handleOnError}}\r\n                    style={this.dropAreaStyle}\r\n                    onDrop={this.handleOnDrop}\r\n                    onError={this.handleOnError}\r\n                    addRemoveButton\r\n                    removeButtonColor=\"#659cef\"\r\n                    onRemoveFile={this.handleOnRemoveFile}\r\n                >\r\n                    <span>Drop CSV file here or click to upload.</span>\r\n                </CSVReader>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const stringToXMLFile = (input) => {\r\n    const element = document.createElement('a');\r\n    const file = new Blob([input], {\r\n        type: 'text/xml',\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = 'customRedirects.xml';\r\n    document.body.appendChild(element); // Required for this to work in FireFox\r\n    element.click();\r\n};\r\n\r\nexport default stringToXMLFile;\r\n","import React from 'react';\nimport Parser from './Parser';\nimport './App.css';\nimport stringToXMLFile from './utils/stringToXMLFile';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>CSV to Episerver XML redirects</h1>\n            <p>\n                A tool to convert a .csv file containing redirects to the XML\n                format expected by the Episerver Redirect Manager.\n            </p>\n            <p>\n                To use the tool, create a list of redirects in a spreadsheet\n                tool, where the first column is the link to be redirected{' '}\n                <em>from</em>, and the second column is the link to be\n                redirected <em>to</em>.\n            </p>\n            <p>\n                Then, upload the file here, and it will automatically convert it\n                to the XML format expected by the Episerver Redirect Manager.\n            </p>\n            <p>\n                <em>\n                    PS: The tool filters out any redirects that don't start with\n                    a slash followed by one or more characters. For example:\n                    /about-us/ is a valid url, but about-us/ is not.\n                </em>\n            </p>\n            <Parser createXML={stringToXMLFile}>\n                <span>Drop CSV file here or click to browse your files.</span>\n            </Parser>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}